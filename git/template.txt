<type>[optional scope]: <description> 
#[optional body]

#[optional footer(s)]
#The commit contains the following structural elements, to communicate intent
#to the consumers of your library:
#TYPES:
#------
#build:
#ci:
#docs:
#feat:
#fix:
#perf:
#refactor:
#style:
#test:
#Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
#Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, Sa
#Documentation only changes
#A commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in S
#A commit of the type fix patches a bug in your codebase (this correlates with PATCH in Semantic Ver
#A code change that improves performance
#A code change that neither fixes a bug nor adds a feature
#Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, e
#Adding missing tests or correcting existing tests
#FOOTERS
#-------
#BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces
#change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.
#footers other than BREAKING CHANGE: <description> may be provided and follow a convention similar to git trai
#MISC: -----
# Additional types are not mandated by the Conventional Commits specification,
# and have no implicit effect in Semantic Versioning (unless they include a BREAKING 32 # CHANGE). A scope may be provided to a commitâ€™s type, to provide additional
# contextual information and is contained within parenthesis,
# e.g., feat(parser): add ability to parse arrays.
